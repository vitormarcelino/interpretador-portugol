/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,12],$V2=[1,29],$V3=[1,25],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,35],$V8=[6,114],$V9=[10,43,52,57,59,60,61,63,64,68],$Va=[1,67],$Vb=[1,62],$Vc=[1,71],$Vd=[1,72],$Ve=[1,64],$Vf=[1,65],$Vg=[1,66],$Vh=[1,68],$Vi=[1,69],$Vj=[1,70],$Vk=[2,43],$Vl=[1,79],$Vm=[10,13,41],$Vn=[18,21],$Vo=[11,18,39,58,62,65,69,74,105,106],$Vp=[1,93],$Vq=[1,94],$Vr=[11,18,39,58,62,65,69,74,102,103,105,106],$Vs=[1,95],$Vt=[11,18,39,58,62,65,69,74,100,102,103,105,106],$Vu=[1,96],$Vv=[11,18,39,58,62,65,69,74,98,100,102,103,105,106],$Vw=[1,97],$Vx=[11,18,39,58,62,65,69,74,96,98,100,102,103,105,106],$Vy=[1,98],$Vz=[1,99],$VA=[11,18,39,58,62,65,69,74,93,94,96,98,100,102,103,105,106],$VB=[1,100],$VC=[1,101],$VD=[1,102],$VE=[1,103],$VF=[11,18,39,58,62,65,69,74,88,89,90,91,93,94,96,98,100,102,103,105,106],$VG=[1,104],$VH=[1,105],$VI=[11,18,39,58,62,65,69,74,75,76,88,89,90,91,93,94,96,98,100,102,103,105,106],$VJ=[1,106],$VK=[1,107],$VL=[1,108],$VM=[1,109],$VN=[11,18,39,58,62,65,69,74,75,76,82,83,84,85,88,89,90,91,93,94,96,98,100,102,103,105,106],$VO=[10,38,73,109,110,111,112],$VP=[11,18,24,39,56,58,62,65,69,74,75,76,82,83,84,85,88,89,90,91,93,94,96,98,100,102,103,105,106],$VQ=[1,122],$VR=[1,123],$VS=[1,124],$VT=[1,125],$VU=[1,126],$VV=[1,135],$VW=[18,74],$VX=[1,169],$VY=[10,11,18,41,74],$VZ=[10,21,41],$V_=[24,37],$V$=[1,199];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"algorithm":3,"stm_algorithm":4,"stm_block":5,"EOF":6,"var_decl_block":7,"func_decl_list":8,"ALGORITMO":9,"T_IDENTIFICADOR":10,";":11,"VARIAVEIS":12,"FIM_VARIAVEIS":13,"var_decl_list":14,"var_decl":15,"matriz_decl":16,"var_decl_id":17,",":18,"var_decl_type":19,"tp_primitivo":20,":":21,"MATRIZ":22,"tp_matriz_index":23,"DE":24,"INTEIRO":25,"REAL":26,"CARACTERE":27,"LITERAL":28,"LOGICO":29,"tp_prim_pl":30,"INTEIROS":31,"REAIS":32,"CARACTERES":33,"LITERAIS":34,"LOGICOS":35,"tp_matriz_index_literal":36,"[":37,"T_INT_LIT":38,"]":39,"tp_matriz":40,"INICIO":41,"stm_list":42,"FIM":43,"stm":44,"stm_attr":45,"stm_fcall":46,"stm_ret":47,"stm_se":48,"stm_enquanto":49,"stm_para":50,"fcall":51,"RETORNE":52,"expr":53,"lvalue":54,"lvalue_array":55,":=":56,"SE":57,"ENTAO":58,"FIM_SE":59,"SENAO":60,"ENQUANTO":61,"FACA":62,"FIM_ENQUANTO":63,"PARA":64,"ATE":65,"stm_para_block":66,"passo":67,"FIM_PARA":68,"PASSO":69,"unary_pos_neg":70,"termo":71,"literal":72,"(":73,")":74,"+":75,"-":76,"unary_op":77,"~":78,"NAO":79,"expr_unary":80,"expr_multiply":81,"*":82,"/":83,"%":84,"^":85,"expr_additive":86,"expr_relational":87,">":88,">=":89,"<":90,"<=":91,"expr_equal":92,"=":93,"<>":94,"expr_and":95,"&":96,"expr_or_exclusive":97,"xou":98,"expr_or":99,"|":100,"expr_logical_and":101,"&&":102,"E":103,"expr_logical_or":104,"||":105,"OU":106,"fcall_args":107,"fcall_arg_list":108,"T_STRING_LIT":109,"T_REAL_LIT":110,"T_CARAC_LIT":111,"T_BOOL_LIT":112,"func_decl":113,"FUNCAO":114,"func_params":115,"func_type":116,"func_param_list":117,"func_param_decl":118,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",9:"ALGORITMO",10:"T_IDENTIFICADOR",11:";",12:"VARIAVEIS",13:"FIM_VARIAVEIS",18:",",21:":",22:"MATRIZ",24:"DE",25:"INTEIRO",26:"REAL",27:"CARACTERE",28:"LITERAL",29:"LOGICO",31:"INTEIROS",32:"REAIS",33:"CARACTERES",34:"LITERAIS",35:"LOGICOS",37:"[",38:"T_INT_LIT",39:"]",41:"INICIO",43:"FIM",52:"RETORNE",56:":=",57:"SE",58:"ENTAO",59:"FIM_SE",60:"SENAO",61:"ENQUANTO",62:"FACA",63:"FIM_ENQUANTO",64:"PARA",65:"ATE",68:"FIM_PARA",69:"PASSO",73:"(",74:")",75:"+",76:"-",78:"~",79:"NAO",82:"*",83:"/",84:"%",85:"^",88:">",89:">=",90:"<",91:"<=",93:"=",94:"<>",96:"&",98:"xou",100:"|",102:"&&",103:"E",105:"||",106:"OU",109:"T_STRING_LIT",110:"T_REAL_LIT",111:"T_CARAC_LIT",112:"T_BOOL_LIT",114:"FUNCAO"},
productions_: [0,[3,3],[3,5],[3,4],[3,4],[4,3],[7,2],[7,3],[14,1],[14,1],[14,2],[14,2],[17,1],[17,3],[19,1],[15,4],[16,7],[20,1],[20,1],[20,1],[20,1],[20,1],[30,1],[30,1],[30,1],[30,1],[30,1],[36,3],[23,1],[23,2],[40,4],[5,3],[5,2],[42,1],[42,2],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[46,2],[47,3],[54,1],[54,2],[55,3],[45,4],[48,4],[48,5],[48,7],[48,6],[48,6],[48,5],[49,5],[49,4],[50,7],[50,8],[66,2],[66,3],[67,2],[67,3],[71,1],[71,1],[71,1],[71,3],[70,1],[70,1],[77,1],[77,1],[77,1],[80,1],[80,2],[81,1],[81,3],[81,3],[81,3],[81,3],[86,1],[86,3],[86,3],[87,1],[87,3],[87,3],[87,3],[87,3],[92,1],[92,3],[92,3],[95,1],[95,3],[97,1],[97,3],[99,1],[99,3],[101,1],[101,3],[101,3],[104,1],[104,3],[104,3],[53,1],[51,2],[107,2],[107,3],[108,1],[108,3],[72,1],[72,1],[72,1],[72,1],[72,1],[8,1],[8,2],[113,4],[113,5],[113,5],[113,6],[116,2],[115,2],[115,3],[117,1],[117,3],[118,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.AlgorithmNode($$[$0-2], null, null, $$[$0-1]); 
break;
case 2:
 return new yy.AlgorithmNode($$[$0-4], $$[$0-3], $$[$0-1], $$[$0-2]); 
break;
case 3:
 return new yy.AlgorithmNode($$[$0-3], null, $$[$0-1], $$[$0-2]); 
break;
case 4:
 return new yy.AlgorithmNode($$[$0-3], $$[$0-2], null, $$[$0-1]); 
break;
case 5: case 27: case 31: case 58: case 64: case 103: case 119:
 this.$ = $$[$0-1]; 
break;
case 6:
 this.$ = new yy.VariablesBlockNode([]); 
break;
case 7:
 this.$ = new yy.VariablesBlockNode($$[$0-1]); 
break;
case 8: case 9: case 117:
 this.$ = $$[$0]; 
break;
case 10: case 11:
 this.$ = $$[$0-1].concat($$[$0]); 
break;
case 12: case 104: case 120:
 this.$ = [$$[$0]]; 
break;
case 13: case 105: case 121:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 15:
 this.$ = yy.Util.createVariableDeclarationList($$[$0-3], $$[$0-1]); 
break;
case 16:
 this.$ = yy.Util.createMatrizDeclarationList($$[$0-6], $$[$0-1], $$[$0-3]); 
break;
case 32: case 57:
 this.$ = new yy.StatementListNode([]); 
break;
case 33:
 this.$ = new yy.StatementListNode([$$[$0]]); 
break;
case 34: case 112:
 $$[$0-1].list.push($$[$0]); this.$ = $$[$0-1]; 
break;
case 41:
 this.$ = new yy.FunctionStatementNode($$[$0-1]); 
break;
case 42:
 this.$ = new yy.ReturnStatementNode($$[$0-1]); 
break;
case 43:
 this.$ = new yy.IdentifierNode($$[$0]); 
break;
case 44:
 this.$ = new yy.ArrayValueNode($$[$0-1], $$[$0]); 
break;
case 45:
 this.$ = $$[$0-1] 
break;
case 46:
 this.$ = new yy.AssignmentExpressionNode($$[$0-2], $$[$0-3], $$[$0-1]); 
break;
case 47:
 this.$ = new yy.IfStatementNode($$[$0-2], new yy.StatementListNode([])); 
break;
case 48:
 this.$ = new yy.IfStatementNode($$[$0-3], $$[$0-1]); 
break;
case 49:
 this.$ = new yy.IfStatementNode($$[$0-5], $$[$0-3], $$[$0-1]); 
break;
case 50:
 this.$ = new yy.IfStatementNode($$[$0-4], new yy.StatementListNode([]), $$[$0-1]); 
break;
case 51:
 this.$ = new yy.IfStatementNode($$[$0-4], $$[$0-2], new yy.StatementListNode([])); 
break;
case 52:
 this.$ = new yy.IfStatementNode($$[$0-3], new yy.StatementListNode([]), new yy.StatementListNode([])); 
break;
case 53:
 this.$ = new yy.WhileStatementNode($$[$0-3], $$[$0-1]); 
break;
case 54:
 this.$ = new yy.WhileStatementNode($$[$0-2], new yy.StatementListNode([])); 
break;
case 55:
 this.$ = new yy.ForStatementNode($$[$0-5], $$[$0-3], $$[$0-1], null, $$[$0]); 
break;
case 56:
 this.$ = new yy.ForStatementNode($$[$0-6], $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 59:
 this.$ = new yy.LiteralNode('Integer', yy.Util.createNumberFromRawString($$[$0]), $$[$0]); 
break;
case 60:
 this.$ = new yy.LiteralNode('Integer', yy.Util.createNumberFromRawString($$[$0-1] + $$[$0]), $$[$0-1] + $$[$0]); 
break;
case 71:
 this.$ = new yy.UnaryExpressionNode($$[$0-1], $$[$0]); 
break;
case 73: case 74: case 75: case 76: case 78: case 79:
 this.$ = new yy.ArithmeticExpressionNode($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 81: case 82: case 83: case 84: case 86: case 87: case 89: case 91: case 93:
 this.$ = new yy.BinaryExpressionNode($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 95: case 96: case 98: case 99:
 this.$ = new yy.LogicalExpressionNode($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 100:
 this.$ = new yy.ExpressionNode($$[$0]); 
break;
case 101:
 this.$ = new yy.FunctionCallNode($$[$0-1], $$[$0]); 
break;
case 102: case 118:
 this.$ = []; 
break;
case 106:
 this.$ = new yy.LiteralNode('literal', $$[$0], $$[$0]); 
break;
case 107:
 this.$ = new yy.LiteralNode('inteiro', yy.Util.createNumberFromRawString($$[$0]), $$[$0]); 
break;
case 108:
 this.$ = new yy.LiteralNode('real', new Number($$[$0]), $$[$0]); 
break;
case 109:
 this.$ = new yy.LiteralNode('caractere', $$[$0], $$[$0]); 
break;
case 110:
 this.$ = new yy.LiteralNode('lógico', $$[$0], $$[$0]); 
break;
case 111:
 this.$ = new yy.FunctionDeclarationListNode([$$[$0]]); 
break;
case 113:
 this.$ = new yy.FunctionDeclarationNode($$[$0-2], null, $$[$0-1], [], $$[$0]); 
break;
case 114:
 this.$ = new yy.FunctionDeclarationNode($$[$0-3], null, $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 115:
 this.$ = new yy.FunctionDeclarationNode($$[$0-3], $$[$0-1], $$[$0-2], [], $$[$0]); 
break;
case 116:
 this.$ = new yy.FunctionDeclarationNode($$[$0-4], $$[$0-2], $$[$0-3], $$[$0-1], $$[$0]); 
break;
case 122:
 this.$ = new yy.FunctionParameterNode($$[$0-2], $$[$0]); 
break;
}
},
table: [{3:1,4:2,9:[1,3]},{1:[3]},{5:4,7:5,12:[1,7],41:$V0},{10:[1,8]},{6:[1,9],8:10,113:11,114:$V1},{5:13,41:$V0},{10:$V2,42:14,43:[1,15],44:16,45:17,46:18,47:19,48:20,49:21,50:22,51:24,52:$V3,54:23,57:$V4,61:$V5,64:$V6},{10:$V7,13:[1,30],14:31,15:32,16:33,17:34},{11:[1,36]},{1:[2,1]},{6:[1,37],113:38,114:$V1},o($V8,[2,111]),{10:[1,39]},{6:[1,41],8:40,113:11,114:$V1},{10:$V2,43:[1,42],44:43,45:17,46:18,47:19,48:20,49:21,50:22,51:24,52:$V3,54:23,57:$V4,61:$V5,64:$V6},o($V8,[2,32]),o($V9,[2,33]),o($V9,[2,35]),o($V9,[2,36]),o($V9,[2,37]),o($V9,[2,38]),o($V9,[2,39]),o($V9,[2,40]),{56:[1,44]},{11:[1,45]},{10:$V2,38:$Va,51:59,53:46,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:49,101:48,104:47,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,53:73,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:49,101:48,104:47,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,53:74,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:49,101:48,104:47,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:[1,76],54:75},o([11,18,39,56,58,62,65,69,74,75,76,82,83,84,85,88,89,90,91,93,94,96,98,100,102,103,105,106],$Vk,{55:77,107:78,37:$Vl,73:[1,80]}),{41:[2,6]},{10:$V7,13:[1,81],15:82,16:83,17:34},o($Vm,[2,8]),o($Vm,[2,9]),{18:[1,85],21:[1,84]},o($Vn,[2,12]),o([12,41],[2,5]),{1:[2,3]},o($V8,[2,112]),{73:[1,87],115:86},{6:[1,88],113:38,114:$V1},{1:[2,4]},o($V8,[2,31]),o($V9,[2,34]),{10:$V2,38:$Va,51:59,53:89,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:49,101:48,104:47,109:$Vg,110:$Vh,111:$Vi,112:$Vj},o($V9,[2,41]),{11:[1,90]},o([11,18,39,58,62,65,69,74],[2,100],{105:[1,91],106:[1,92]}),o($Vo,[2,97],{102:$Vp,103:$Vq}),o($Vr,[2,94],{100:$Vs}),o($Vt,[2,92],{98:$Vu}),o($Vv,[2,90],{96:$Vw}),o($Vx,[2,88],{93:$Vy,94:$Vz}),o($VA,[2,85],{88:$VB,89:$VC,90:$VD,91:$VE}),o($VF,[2,80],{75:$VG,76:$VH}),o($VI,[2,77],{82:$VJ,83:$VK,84:$VL,85:$VM}),o($VN,[2,72]),o($VN,[2,70]),{10:$V2,38:$Va,51:59,54:60,71:110,72:61,73:$Vb,109:$Vg,110:$Vh,111:$Vi,112:$Vj},o($VN,[2,61]),o($VN,[2,62]),o($VN,[2,63]),{10:$V2,38:$Va,51:59,53:111,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:49,101:48,104:47,109:$Vg,110:$Vh,111:$Vi,112:$Vj},o($VO,[2,67]),o($VO,[2,68]),o($VO,[2,69]),o($VN,[2,106]),o($VN,[2,107]),o($VN,[2,108]),o($VN,[2,109]),o($VN,[2,110]),o($VO,[2,65]),o($VO,[2,66]),{58:[1,112]},{62:[1,113]},{24:[1,114]},{24:$Vk,37:$Vl,55:77},o($VP,[2,44]),o($VN,[2,101]),{10:$V2,38:$Va,51:59,53:115,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:49,101:48,104:47,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,53:118,54:60,70:63,71:57,72:61,73:$Vb,74:[1,116],75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:49,101:48,104:47,108:117,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{41:[2,7]},o($Vm,[2,10]),o($Vm,[2,11]),{19:119,20:121,22:[1,120],25:$VQ,26:$VR,27:$VS,28:$VT,29:$VU},{10:[1,127]},{5:128,10:$V7,14:129,15:32,16:33,17:34,21:[1,131],41:$V0,116:130},{10:$VV,74:[1,132],117:133,118:134},{1:[2,2]},{11:[1,136]},o($V9,[2,42]),{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:49,101:137,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:49,101:138,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:139,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:140,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:141,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:142,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:143,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:144,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:145,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:146,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:147,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:148,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:149,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:150,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:151,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:152,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:153,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:154,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{10:$V2,38:$Va,51:59,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:155,109:$Vg,110:$Vh,111:$Vi,112:$Vj},o($VN,[2,71]),{74:[1,156]},{10:$V2,42:158,44:16,45:17,46:18,47:19,48:20,49:21,50:22,51:24,52:$V3,54:23,57:$V4,59:[1,157],60:[1,159],61:$V5,64:$V6},{10:$V2,42:160,44:16,45:17,46:18,47:19,48:20,49:21,50:22,51:24,52:$V3,54:23,57:$V4,61:$V5,63:[1,161],64:$V6},{10:$V2,38:$Va,51:59,53:162,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:49,101:48,104:47,109:$Vg,110:$Vh,111:$Vi,112:$Vj},{39:[1,163]},o($VN,[2,102]),{18:[1,165],74:[1,164]},o($VW,[2,104]),{11:[1,166]},{23:167,36:168,37:$VX},o([11,18,74],[2,14]),o($VY,[2,17]),o($VY,[2,18]),o($VY,[2,19]),o($VY,[2,20]),o($VY,[2,21]),o($Vn,[2,13]),o($V8,[2,113]),{5:170,10:$V7,15:82,16:83,17:34,41:$V0},{5:171,10:$V7,14:172,15:32,16:33,17:34,41:$V0},{20:173,25:$VQ,26:$VR,27:$VS,28:$VT,29:$VU},o($VZ,[2,118]),{18:[1,175],74:[1,174]},o($VW,[2,120]),{21:[1,176]},o($V9,[2,46]),o($Vo,[2,98],{102:$Vp,103:$Vq}),o($Vo,[2,99],{102:$Vp,103:$Vq}),o($Vr,[2,95],{100:$Vs}),o($Vr,[2,96],{100:$Vs}),o($Vt,[2,93],{98:$Vu}),o($Vv,[2,91],{96:$Vw}),o($Vx,[2,89],{93:$Vy,94:$Vz}),o($VA,[2,86],{88:$VB,89:$VC,90:$VD,91:$VE}),o($VA,[2,87],{88:$VB,89:$VC,90:$VD,91:$VE}),o($VF,[2,81],{75:$VG,76:$VH}),o($VF,[2,82],{75:$VG,76:$VH}),o($VF,[2,83],{75:$VG,76:$VH}),o($VF,[2,84],{75:$VG,76:$VH}),o($VI,[2,78],{82:$VJ,83:$VK,84:$VL,85:$VM}),o($VI,[2,79],{82:$VJ,83:$VK,84:$VL,85:$VM}),o($VN,[2,73]),o($VN,[2,74]),o($VN,[2,75]),o($VN,[2,76]),o($VN,[2,64]),o($V9,[2,47]),{10:$V2,44:43,45:17,46:18,47:19,48:20,49:21,50:22,51:24,52:$V3,54:23,57:$V4,59:[1,177],60:[1,178],61:$V5,64:$V6},{10:$V2,42:179,44:16,45:17,46:18,47:19,48:20,49:21,50:22,51:24,52:$V3,54:23,57:$V4,59:[1,180],61:$V5,64:$V6},{10:$V2,44:43,45:17,46:18,47:19,48:20,49:21,50:22,51:24,52:$V3,54:23,57:$V4,61:$V5,63:[1,181],64:$V6},o($V9,[2,54]),{65:[1,182]},o($VP,[2,45]),o($VN,[2,103]),{10:$V2,38:$Va,51:59,53:183,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:49,101:48,104:47,109:$Vg,110:$Vh,111:$Vi,112:$Vj},o($Vm,[2,15]),{24:[1,184],36:185,37:$VX},o($V_,[2,28]),{38:[1,186]},o($V8,[2,114]),o($V8,[2,115]),{5:187,10:$V7,15:82,16:83,17:34,41:$V0},o([10,41],[2,117]),o($VZ,[2,119]),{10:$VV,118:188},{19:189,20:121,25:$VQ,26:$VR,27:$VS,28:$VT,29:$VU},o($V9,[2,48]),{10:$V2,42:190,44:16,45:17,46:18,47:19,48:20,49:21,50:22,51:24,52:$V3,54:23,57:$V4,59:[1,191],61:$V5,64:$V6},{10:$V2,44:43,45:17,46:18,47:19,48:20,49:21,50:22,51:24,52:$V3,54:23,57:$V4,59:[1,192],61:$V5,64:$V6},o($V9,[2,52]),o($V9,[2,53]),{10:$V2,38:$Va,51:59,53:193,54:60,70:63,71:57,72:61,73:$Vb,75:$Vc,76:$Vd,77:58,78:$Ve,79:$Vf,80:56,81:55,86:54,87:53,92:52,95:51,97:50,99:49,101:48,104:47,109:$Vg,110:$Vh,111:$Vi,112:$Vj},o($VW,[2,105]),{20:194,25:$VQ,26:$VR,27:$VS,28:$VT,29:$VU},o($V_,[2,29]),{39:[1,195]},o($V8,[2,116]),o($VW,[2,121]),o($VW,[2,122]),{10:$V2,44:43,45:17,46:18,47:19,48:20,49:21,50:22,51:24,52:$V3,54:23,57:$V4,59:[1,196],61:$V5,64:$V6},o($V9,[2,51]),o($V9,[2,50]),{62:$V$,66:197,67:198,69:[1,200]},{11:[1,201]},o($V_,[2,27]),o($V9,[2,49]),o($V9,[2,55]),{62:$V$,66:202},{10:$V2,42:204,44:16,45:17,46:18,47:19,48:20,49:21,50:22,51:24,52:$V3,54:23,57:$V4,61:$V5,64:$V6,68:[1,203]},{38:[1,205],70:206,75:$Vc,76:$Vd},o($Vm,[2,16]),o($V9,[2,56]),o($V9,[2,57]),{10:$V2,44:43,45:17,46:18,47:19,48:20,49:21,50:22,51:24,52:$V3,54:23,57:$V4,61:$V5,64:$V6,68:[1,207]},{62:[2,59]},{38:[1,208]},o($V9,[2,58]),{62:[2,60]}],
defaultActions: {9:[2,1],30:[2,6],37:[2,3],41:[2,4],81:[2,7],88:[2,2],205:[2,59],208:[2,60]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            global.terminal.error(str); throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* ignore comment */ 
break;
case 1: this.begin('comment'); 
break;
case 2: this.popState(); 
break;
case 3: /* ignore comment */ 
break;
case 4: /* ignore space */ 
break;
case 5: return 6; 
break;
case 6: return "T_REAL_LIT" 
break;
case 7: return "T_INT_LIT" 
break;
case 8: return "T_STRING_LIT"; 
break;
case 9: return "T_STRING_LIT"; 
break;
case 10: return "T_CARAC_LIT"; 
break;
case 11: return "T_BOOL_LIT"; 
break;
case 12: return "T_BOOL_LIT"; 
break;
case 13: return "ALGORITMO"; 
break;
case 14: return "VARIAVEIS"; 
break;
case 15: return "FIM_VARIAVEIS"; 
break;
case 16: return "FIM_ENQUANTO"; 
break;
case 17: return "FIM_PARA"; 
break;
case 18: return "FIM_SE"; 
break;
case 19: return "FIM"; 
break;
case 20: return "INTEIRO"; 
break;
case 21: return "REAL"; 
break;
case 22: return "CARACTERE"; 
break;
case 23: return "LITERAL"; 
break;
case 24: return "LOGICO"; 
break;
case 25: return "INICIO"; 
break;
case 26: return "SE"; 
break;
case 27: return "SENAO"; 
break;
case 28: return "ENQUANTO"; 
break;
case 29: return "ENTAO"; 
break;
case 30: return "FACA"; 
break;
case 31: return "PARA"; 
break;
case 32: return "DE"; 
break;
case 33: return "ATE"; 
break;
case 34: return "E"; 
break;
case 35: return "OU"; 
break;
case 36: return "XOU"; 
break;
case 37: return "NAO"; 
break;
case 38: return "MATRIZ"; 
break;
case 39: return "INTEIROS"; 
break;
case 40: return "REAIS"; 
break;
case 41: return "CARACTERES"; 
break;
case 42: return "LITERAIS"; 
break;
case 43: return "LOGICOS"; 
break;
case 44: return "FUNCAO"; 
break;
case 45: return "RETORNE"; 
break;
case 46: return "PASSO"; 
break;
case 47: return "T_IDENTIFICADOR"; 
break;
case 48: return ":="; 
break;
case 49: return ";"; 
break;
case 50: return ":"; 
break;
case 51: return ","; 
break;
case 52: return "["; 
break;
case 53: return "]"; 
break;
case 54: return "("; 
break;
case 55: return ")"; 
break;
case 56: return "+"; 
break;
case 57: return "-"; 
break;
case 58: return "*"; 
break;
case 59: return "/"; 
break;
case 60: return "%"; 
break;
case 61: return "||"; 
break;
case 62: return "&&"; 
break;
case 63: return "|"; 
break;
case 64: return "&"; 
break;
case 65: return "^"; 
break;
case 66: return "~"; 
break;
case 67: return "<>"; 
break;
case 68: return ">="; 
break;
case 69: return "<="; 
break;
case 70: return "<"; 
break;
case 71: return ">"; 
break;
case 72: return "="; 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:$)/,/^(?:(([0-9]+)[\.]([0-9]+)))/,/^(?:(([0][cC][0-8]+)|([0][xX][0-9a-fA-F]+)|([0][bB][01]+)|([0-9]+)))/,/^(?:"")/,/^(?:"([^"]|(\\.))*")/,/^(?:'(.|(\\.))')/,/^(?:verdadeiro\b)/,/^(?:falso\b)/,/^(?:algoritmo\b)/,/^(?:variaveis\b)/,/^(?:fimvariaveis\b)/,/^(?:fimenquanto\b)/,/^(?:fimpara\b)/,/^(?:fimse\b)/,/^(?:fim\b)/,/^(?:inteiro\b)/,/^(?:real\b)/,/^(?:caractere\b)/,/^(?:literal\b)/,/^(?:logico\b)/,/^(?:inicio\b)/,/^(?:se\b)/,/^(?:senao\b)/,/^(?:enquanto\b)/,/^(?:entao\b)/,/^(?:faca\b)/,/^(?:para\b)/,/^(?:de\b)/,/^(?:ate\b)/,/^(?:e\b)/,/^(?:ou\b)/,/^(?:xou\b)/,/^(?:nao\b)/,/^(?:matriz\b)/,/^(?:inteiros\b)/,/^(?:reais\b)/,/^(?:caracteres\b)/,/^(?:literais\b)/,/^(?:logicos\b)/,/^(?:funcao\b)/,/^(?:retorne\b)/,/^(?:passo\b)/,/^(?:[a-zA-Z_][0-9a-zA-Z_]*)/,/^(?::=)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\|)/,/^(?:&)/,/^(?:\^)/,/^(?:~)/,/^(?:<>)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}