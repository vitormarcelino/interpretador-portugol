/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,12],$V2=[1,29],$V3=[1,25],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,34],$V8=[6,113],$V9=[10,42,51,56,58,59,60,62,63,67],$Va=[1,66],$Vb=[1,61],$Vc=[1,70],$Vd=[1,71],$Ve=[1,63],$Vf=[1,64],$Vg=[1,65],$Vh=[1,67],$Vi=[1,68],$Vj=[1,69],$Vk=[2,41],$Vl=[1,78],$Vm=[10,13,40],$Vn=[17,21],$Vo=[11,17,57,61,64,68,73,104,105],$Vp=[1,91],$Vq=[1,92],$Vr=[11,17,57,61,64,68,73,101,102,104,105],$Vs=[1,93],$Vt=[11,17,57,61,64,68,73,99,101,102,104,105],$Vu=[1,94],$Vv=[11,17,57,61,64,68,73,97,99,101,102,104,105],$Vw=[1,95],$Vx=[11,17,57,61,64,68,73,95,97,99,101,102,104,105],$Vy=[1,96],$Vz=[1,97],$VA=[11,17,57,61,64,68,73,92,93,95,97,99,101,102,104,105],$VB=[1,98],$VC=[1,99],$VD=[1,100],$VE=[1,101],$VF=[11,17,57,61,64,68,73,87,88,89,90,92,93,95,97,99,101,102,104,105],$VG=[1,102],$VH=[1,103],$VI=[11,17,57,61,64,68,73,74,75,87,88,89,90,92,93,95,97,99,101,102,104,105],$VJ=[1,104],$VK=[1,105],$VL=[1,106],$VM=[1,107],$VN=[11,17,57,61,64,68,73,74,75,81,82,83,84,87,88,89,90,92,93,95,97,99,101,102,104,105],$VO=[10,35,72,108,109,110,111],$VP=[1,121],$VQ=[1,122],$VR=[1,123],$VS=[1,124],$VT=[1,125],$VU=[1,126],$VV=[1,135],$VW=[17,73],$VX=[11,17,73],$VY=[10,11,17,40,73],$VZ=[1,170],$V_=[10,21,40],$V$=[11,17,34,39,55,57,61,64,68,73,74,75,81,82,83,84,87,88,89,90,92,93,95,97,99,101,102,104,105],$V01=[34,39],$V11=[1,206];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"algorithm":3,"stm_algorithm":4,"stm_block":5,"EOF":6,"var_decl_block":7,"func_decl_list":8,"ALGORITMO":9,"T_IDENTIFICADOR":10,";":11,"VARIAVEIS":12,"FIM_VARIAVEIS":13,"var_decl_list":14,"var_decl":15,"var_decl_id":16,",":17,"var_decl_type":18,"tp_primitivo":19,"tp_matriz":20,":":21,"INTEIRO":22,"REAL":23,"CARACTERE":24,"LITERAL":25,"LOGICO":26,"tp_prim_pl":27,"INTEIROS":28,"REAIS":29,"CARACTERES":30,"LITERAIS":31,"LOGICOS":32,"tp_matriz_index_literal":33,"[":34,"T_INT_LIT":35,"]":36,"tp_matriz_index":37,"MATRIZ":38,"DE":39,"INICIO":40,"stm_list":41,"FIM":42,"stm":43,"stm_attr":44,"stm_fcall":45,"stm_ret":46,"stm_se":47,"stm_enquanto":48,"stm_para":49,"fcall":50,"RETORNE":51,"expr":52,"lvalue":53,"lvalue_array":54,":=":55,"SE":56,"ENTAO":57,"FIM_SE":58,"SENAO":59,"ENQUANTO":60,"FACA":61,"FIM_ENQUANTO":62,"PARA":63,"ATE":64,"stm_para_block":65,"passo":66,"FIM_PARA":67,"PASSO":68,"unary_pos_neg":69,"termo":70,"literal":71,"(":72,")":73,"+":74,"-":75,"unary_op":76,"~":77,"NAO":78,"expr_unary":79,"expr_multiply":80,"*":81,"/":82,"%":83,"^":84,"expr_additive":85,"expr_relational":86,">":87,">=":88,"<":89,"<=":90,"expr_equal":91,"=":92,"<>":93,"expr_and":94,"&":95,"expr_or_exclusive":96,"xou":97,"expr_or":98,"|":99,"expr_logical_and":100,"&&":101,"E":102,"expr_logical_or":103,"||":104,"OU":105,"fcall_args":106,"fcall_arg_list":107,"T_STRING_LIT":108,"T_REAL_LIT":109,"T_CARAC_LIT":110,"T_BOOL_LIT":111,"func_decl":112,"FUNCAO":113,"func_params":114,"func_type":115,"func_param_list":116,"func_param_decl":117,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",9:"ALGORITMO",10:"T_IDENTIFICADOR",11:";",12:"VARIAVEIS",13:"FIM_VARIAVEIS",17:",",21:":",22:"INTEIRO",23:"REAL",24:"CARACTERE",25:"LITERAL",26:"LOGICO",28:"INTEIROS",29:"REAIS",30:"CARACTERES",31:"LITERAIS",32:"LOGICOS",34:"[",35:"T_INT_LIT",36:"]",38:"MATRIZ",39:"DE",40:"INICIO",42:"FIM",51:"RETORNE",55:":=",56:"SE",57:"ENTAO",58:"FIM_SE",59:"SENAO",60:"ENQUANTO",61:"FACA",62:"FIM_ENQUANTO",63:"PARA",64:"ATE",67:"FIM_PARA",68:"PASSO",72:"(",73:")",74:"+",75:"-",77:"~",78:"NAO",81:"*",82:"/",83:"%",84:"^",87:">",88:">=",89:"<",90:"<=",92:"=",93:"<>",95:"&",97:"xou",99:"|",101:"&&",102:"E",104:"||",105:"OU",108:"T_STRING_LIT",109:"T_REAL_LIT",110:"T_CARAC_LIT",111:"T_BOOL_LIT",113:"FUNCAO"},
productions_: [0,[3,3],[3,5],[3,4],[3,4],[4,3],[7,2],[7,3],[14,1],[14,2],[16,1],[16,3],[18,1],[18,1],[15,4],[19,1],[19,1],[19,1],[19,1],[19,1],[27,1],[27,1],[27,1],[27,1],[27,1],[33,3],[37,1],[37,2],[20,4],[5,3],[5,2],[41,1],[41,2],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[45,2],[46,3],[53,1],[53,2],[54,3],[54,4],[44,4],[47,4],[47,5],[47,7],[47,6],[47,6],[47,5],[48,5],[48,4],[49,7],[49,8],[65,2],[65,3],[66,2],[66,3],[70,1],[70,1],[70,1],[70,3],[69,1],[69,1],[76,1],[76,1],[76,1],[79,1],[79,2],[80,1],[80,3],[80,3],[80,3],[80,3],[85,1],[85,3],[85,3],[86,1],[86,3],[86,3],[86,3],[86,3],[91,1],[91,3],[91,3],[94,1],[94,3],[96,1],[96,3],[98,1],[98,3],[100,1],[100,3],[100,3],[103,1],[103,3],[103,3],[52,1],[50,2],[106,2],[106,3],[107,1],[107,3],[71,1],[71,1],[71,1],[71,1],[71,1],[8,1],[8,2],[112,4],[112,5],[112,5],[112,6],[115,2],[114,2],[114,3],[116,1],[116,3],[117,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.AlgorithmNode($$[$0-2], null, null, $$[$0-1]); 
break;
case 2:
 return new yy.AlgorithmNode($$[$0-4], $$[$0-3], $$[$0-1], $$[$0-2]); 
break;
case 3:
 return new yy.AlgorithmNode($$[$0-3], null, $$[$0-1], $$[$0-2]); 
break;
case 4:
 return new yy.AlgorithmNode($$[$0-3], $$[$0-2], null, $$[$0-1]); 
break;
case 5: case 29: case 57: case 63: case 102: case 118:
 this.$ = $$[$0-1]; 
break;
case 6:
 this.$ = new yy.VariablesBlockNode([]); 
break;
case 7:
 this.$ = new yy.VariablesBlockNode($$[$0-1]); 
break;
case 8: case 116:
 this.$ = $$[$0]; 
break;
case 9:
 this.$ = $$[$0-1].concat($$[$0]); 
break;
case 10: case 103: case 119:
 this.$ = [$$[$0]]; 
break;
case 11: case 104: case 120:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 14:
 this.$ = yy.Util.createVariableDeclarationList($$[$0-3], $$[$0-1]); 
break;
case 30: case 56:
 this.$ = new yy.StatementListNode([]); 
break;
case 31:
 this.$ = new yy.StatementListNode([$$[$0]]); 
break;
case 32: case 111:
 $$[$0-1].list.push($$[$0]); this.$ = $$[$0-1]; 
break;
case 39:
 this.$ = new yy.FunctionStatementNode($$[$0-1]); 
break;
case 40:
 this.$ = new yy.ReturnStatementNode($$[$0-1]); 
break;
case 41:
 this.$ = new yy.IdentifierNode($$[$0]); 
break;
case 42:
 this.$ = new yy.ArrayValueNode($$[$0]); 
break;
case 43:
 this.$ = new yy.IdentifierArrayNode($$[$0-1]); 
break;
case 44:
 this.$ = new yy.IdentifierArrayNode($$[$0-2]); 
break;
case 45:
 this.$ = new yy.AssignmentExpressionNode($$[$0-2], $$[$0-3], $$[$0-1]); 
break;
case 46:
 this.$ = new yy.IfStatementNode($$[$0-2], new yy.StatementListNode([])); 
break;
case 47:
 this.$ = new yy.IfStatementNode($$[$0-3], $$[$0-1]); 
break;
case 48:
 this.$ = new yy.IfStatementNode($$[$0-5], $$[$0-3], $$[$0-1]); 
break;
case 49:
 this.$ = new yy.IfStatementNode($$[$0-4], new yy.StatementListNode([]), $$[$0-1]); 
break;
case 50:
 this.$ = new yy.IfStatementNode($$[$0-4], $$[$0-2], new yy.StatementListNode([])); 
break;
case 51:
 this.$ = new yy.IfStatementNode($$[$0-3], new yy.StatementListNode([]), new yy.StatementListNode([])); 
break;
case 52:
 this.$ = new yy.WhileStatementNode($$[$0-3], $$[$0-1]); 
break;
case 53:
 this.$ = new yy.WhileStatementNode($$[$0-2], new yy.StatementListNode([])); 
break;
case 54:
 this.$ = new yy.ForStatementNode($$[$0-5], $$[$0-3], $$[$0-1], null, $$[$0]); 
break;
case 55:
 this.$ = new yy.ForStatementNode($$[$0-6], $$[$0-4], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 58:
 this.$ = new yy.LiteralNode('Integer', yy.Util.createNumberFromRawString($$[$0]), $$[$0]); 
break;
case 59:
 this.$ = new yy.LiteralNode('Integer', yy.Util.createNumberFromRawString($$[$0-1] + $$[$0]), $$[$0-1] + $$[$0]); 
break;
case 70:
 this.$ = new yy.UnaryExpressionNode($$[$0-1], $$[$0]); 
break;
case 72: case 73: case 74: case 75: case 77: case 78:
 this.$ = new yy.ArithmeticExpressionNode($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 80: case 81: case 82: case 83: case 85: case 86: case 88: case 90: case 92:
 this.$ = new yy.BinaryExpressionNode($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 94: case 95: case 97: case 98:
 this.$ = new yy.LogicalExpressionNode($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 99:
 this.$ = new yy.ExpressionNode($$[$0]); 
break;
case 100:
 this.$ = new yy.FunctionCallNode($$[$0-1], $$[$0]); 
break;
case 101: case 117:
 this.$ = []; 
break;
case 105:
 this.$ = new yy.LiteralNode('literal', $$[$0], $$[$0]); 
break;
case 106:
 this.$ = new yy.LiteralNode('inteiro', yy.Util.createNumberFromRawString($$[$0]), $$[$0]); 
break;
case 107:
 this.$ = new yy.LiteralNode('real', new Number($$[$0]), $$[$0]); 
break;
case 108:
 this.$ = new yy.LiteralNode('caractere', $$[$0], $$[$0]); 
break;
case 109:
 this.$ = new yy.LiteralNode('lógico', $$[$0], $$[$0]); 
break;
case 110:
 this.$ = new yy.FunctionDeclarationListNode([$$[$0]]); 
break;
case 112:
 this.$ = new yy.FunctionDeclarationNode($$[$0-2], null, $$[$0-1], [], $$[$0]); 
break;
case 113:
 this.$ = new yy.FunctionDeclarationNode($$[$0-3], null, $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 114:
 this.$ = new yy.FunctionDeclarationNode($$[$0-3], $$[$0-1], $$[$0-2], [], $$[$0]); 
break;
case 115:
 this.$ = new yy.FunctionDeclarationNode($$[$0-4], $$[$0-2], $$[$0-3], $$[$0-1], $$[$0]); 
break;
case 121:
 this.$ = new yy.FunctionParameterNode($$[$0-2], $$[$0]); 
break;
}
},
table: [{3:1,4:2,9:[1,3]},{1:[3]},{5:4,7:5,12:[1,7],40:$V0},{10:[1,8]},{6:[1,9],8:10,112:11,113:$V1},{5:13,40:$V0},{10:$V2,41:14,42:[1,15],43:16,44:17,45:18,46:19,47:20,48:21,49:22,50:24,51:$V3,53:23,56:$V4,60:$V5,63:$V6},{10:$V7,13:[1,30],14:31,15:32,16:33},{11:[1,35]},{1:[2,1]},{6:[1,36],112:37,113:$V1},o($V8,[2,110]),{10:[1,38]},{6:[1,40],8:39,112:11,113:$V1},{10:$V2,42:[1,41],43:42,44:17,45:18,46:19,47:20,48:21,49:22,50:24,51:$V3,53:23,56:$V4,60:$V5,63:$V6},o($V8,[2,30]),o($V9,[2,31]),o($V9,[2,33]),o($V9,[2,34]),o($V9,[2,35]),o($V9,[2,36]),o($V9,[2,37]),o($V9,[2,38]),{55:[1,43]},{11:[1,44]},{10:$V2,35:$Va,50:58,52:45,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:49,98:48,100:47,103:46,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,52:72,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:49,98:48,100:47,103:46,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,52:73,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:49,98:48,100:47,103:46,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:[1,75],53:74},o([11,17,55,57,61,64,68,73,74,75,81,82,83,84,87,88,89,90,92,93,95,97,99,101,102,104,105],$Vk,{54:76,106:77,34:$Vl,72:[1,79]}),{40:[2,6]},{10:$V7,13:[1,80],15:81,16:33},o($Vm,[2,8]),{17:[1,83],21:[1,82]},o($Vn,[2,10]),o([12,40],[2,5]),{1:[2,3]},o($V8,[2,111]),{72:[1,85],114:84},{6:[1,86],112:37,113:$V1},{1:[2,4]},o($V8,[2,29]),o($V9,[2,32]),{10:$V2,35:$Va,50:58,52:87,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:49,98:48,100:47,103:46,108:$Vg,109:$Vh,110:$Vi,111:$Vj},o($V9,[2,39]),{11:[1,88]},o([11,17,57,61,64,68,73],[2,99],{104:[1,89],105:[1,90]}),o($Vo,[2,96],{101:$Vp,102:$Vq}),o($Vr,[2,93],{99:$Vs}),o($Vt,[2,91],{97:$Vu}),o($Vv,[2,89],{95:$Vw}),o($Vx,[2,87],{92:$Vy,93:$Vz}),o($VA,[2,84],{87:$VB,88:$VC,89:$VD,90:$VE}),o($VF,[2,79],{74:$VG,75:$VH}),o($VI,[2,76],{81:$VJ,82:$VK,83:$VL,84:$VM}),o($VN,[2,71]),o($VN,[2,69]),{10:$V2,35:$Va,50:58,53:59,70:108,71:60,72:$Vb,108:$Vg,109:$Vh,110:$Vi,111:$Vj},o($VN,[2,60]),o($VN,[2,61]),o($VN,[2,62]),{10:$V2,35:$Va,50:58,52:109,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:49,98:48,100:47,103:46,108:$Vg,109:$Vh,110:$Vi,111:$Vj},o($VO,[2,66]),o($VO,[2,67]),o($VO,[2,68]),o($VN,[2,105]),o($VN,[2,106]),o($VN,[2,107]),o($VN,[2,108]),o($VN,[2,109]),o($VO,[2,64]),o($VO,[2,65]),{57:[1,110]},{61:[1,111]},{39:[1,112]},{34:$Vl,39:$Vk,54:76},o([11,17,39,55,57,61,64,68,73,74,75,81,82,83,84,87,88,89,90,92,93,95,97,99,101,102,104,105],[2,42],{34:[1,113]}),o($VN,[2,100]),{35:[1,114]},{10:$V2,35:$Va,50:58,52:117,53:59,69:62,70:56,71:60,72:$Vb,73:[1,115],74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:49,98:48,100:47,103:46,107:116,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{40:[2,7]},o($Vm,[2,9]),{18:118,19:119,20:120,22:$VP,23:$VQ,24:$VR,25:$VS,26:$VT,38:$VU},{10:[1,127]},{5:128,10:$V7,14:129,15:32,16:33,21:[1,131],40:$V0,115:130},{10:$VV,73:[1,132],116:133,117:134},{1:[2,2]},{11:[1,136]},o($V9,[2,40]),{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:49,98:48,100:137,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:49,98:48,100:138,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:49,98:139,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:49,98:140,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:141,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:142,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:143,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:144,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:145,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:146,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:147,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:148,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:149,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:150,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:151,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:152,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:153,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:154,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{10:$V2,35:$Va,50:58,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:155,108:$Vg,109:$Vh,110:$Vi,111:$Vj},o($VN,[2,70]),{73:[1,156]},{10:$V2,41:158,43:16,44:17,45:18,46:19,47:20,48:21,49:22,50:24,51:$V3,53:23,56:$V4,58:[1,157],59:[1,159],60:$V5,63:$V6},{10:$V2,41:160,43:16,44:17,45:18,46:19,47:20,48:21,49:22,50:24,51:$V3,53:23,56:$V4,60:$V5,62:[1,161],63:$V6},{10:$V2,35:$Va,50:58,52:162,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:49,98:48,100:47,103:46,108:$Vg,109:$Vh,110:$Vi,111:$Vj},{35:[1,163]},{36:[1,164]},o($VN,[2,101]),{17:[1,166],73:[1,165]},o($VW,[2,103]),{11:[1,167]},o($VX,[2,12]),o($VX,[2,13]),o($VY,[2,15]),o($VY,[2,16]),o($VY,[2,17]),o($VY,[2,18]),o($VY,[2,19]),{33:169,34:$VZ,37:168},o($Vn,[2,11]),o($V8,[2,112]),{5:171,10:$V7,15:81,16:33,40:$V0},{5:172,10:$V7,14:173,15:32,16:33,40:$V0},{19:174,22:$VP,23:$VQ,24:$VR,25:$VS,26:$VT},o($V_,[2,117]),{17:[1,176],73:[1,175]},o($VW,[2,119]),{21:[1,177]},o($V9,[2,45]),o($Vo,[2,97],{101:$Vp,102:$Vq}),o($Vo,[2,98],{101:$Vp,102:$Vq}),o($Vr,[2,94],{99:$Vs}),o($Vr,[2,95],{99:$Vs}),o($Vt,[2,92],{97:$Vu}),o($Vv,[2,90],{95:$Vw}),o($Vx,[2,88],{92:$Vy,93:$Vz}),o($VA,[2,85],{87:$VB,88:$VC,89:$VD,90:$VE}),o($VA,[2,86],{87:$VB,88:$VC,89:$VD,90:$VE}),o($VF,[2,80],{74:$VG,75:$VH}),o($VF,[2,81],{74:$VG,75:$VH}),o($VF,[2,82],{74:$VG,75:$VH}),o($VF,[2,83],{74:$VG,75:$VH}),o($VI,[2,77],{81:$VJ,82:$VK,83:$VL,84:$VM}),o($VI,[2,78],{81:$VJ,82:$VK,83:$VL,84:$VM}),o($VN,[2,72]),o($VN,[2,73]),o($VN,[2,74]),o($VN,[2,75]),o($VN,[2,63]),o($V9,[2,46]),{10:$V2,43:42,44:17,45:18,46:19,47:20,48:21,49:22,50:24,51:$V3,53:23,56:$V4,58:[1,178],59:[1,179],60:$V5,63:$V6},{10:$V2,41:180,43:16,44:17,45:18,46:19,47:20,48:21,49:22,50:24,51:$V3,53:23,56:$V4,58:[1,181],60:$V5,63:$V6},{10:$V2,43:42,44:17,45:18,46:19,47:20,48:21,49:22,50:24,51:$V3,53:23,56:$V4,60:$V5,62:[1,182],63:$V6},o($V9,[2,53]),{64:[1,183]},{36:[1,184]},o($V$,[2,43]),o($VN,[2,102]),{10:$V2,35:$Va,50:58,52:185,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:49,98:48,100:47,103:46,108:$Vg,109:$Vh,110:$Vi,111:$Vj},o($Vm,[2,14]),{33:187,34:$VZ,39:[1,186]},o($V01,[2,26]),{35:[1,188]},o($V8,[2,113]),o($V8,[2,114]),{5:189,10:$V7,15:81,16:33,40:$V0},o([10,40],[2,116]),o($V_,[2,118]),{10:$VV,117:190},{18:191,19:119,20:120,22:$VP,23:$VQ,24:$VR,25:$VS,26:$VT,38:$VU},o($V9,[2,47]),{10:$V2,41:192,43:16,44:17,45:18,46:19,47:20,48:21,49:22,50:24,51:$V3,53:23,56:$V4,58:[1,193],60:$V5,63:$V6},{10:$V2,43:42,44:17,45:18,46:19,47:20,48:21,49:22,50:24,51:$V3,53:23,56:$V4,58:[1,194],60:$V5,63:$V6},o($V9,[2,51]),o($V9,[2,52]),{10:$V2,35:$Va,50:58,52:195,53:59,69:62,70:56,71:60,72:$Vb,74:$Vc,75:$Vd,76:57,77:$Ve,78:$Vf,79:55,80:54,85:53,86:52,91:51,94:50,96:49,98:48,100:47,103:46,108:$Vg,109:$Vh,110:$Vi,111:$Vj},o($V$,[2,44]),o($VW,[2,104]),{27:196,28:[1,197],29:[1,198],30:[1,199],31:[1,200],32:[1,201]},o($V01,[2,27]),{36:[1,202]},o($V8,[2,115]),o($VW,[2,120]),o($VW,[2,121]),{10:$V2,43:42,44:17,45:18,46:19,47:20,48:21,49:22,50:24,51:$V3,53:23,56:$V4,58:[1,203],60:$V5,63:$V6},o($V9,[2,50]),o($V9,[2,49]),{61:$V11,65:204,66:205,68:[1,207]},o($VX,[2,28]),o($VX,[2,20]),o($VX,[2,21]),o($VX,[2,22]),o($VX,[2,23]),o($VX,[2,24]),o($V01,[2,25]),o($V9,[2,48]),o($V9,[2,54]),{61:$V11,65:208},{10:$V2,41:210,43:16,44:17,45:18,46:19,47:20,48:21,49:22,50:24,51:$V3,53:23,56:$V4,60:$V5,63:$V6,67:[1,209]},{35:[1,211],69:212,74:$Vc,75:$Vd},o($V9,[2,55]),o($V9,[2,56]),{10:$V2,43:42,44:17,45:18,46:19,47:20,48:21,49:22,50:24,51:$V3,53:23,56:$V4,60:$V5,63:$V6,67:[1,213]},{61:[2,58]},{35:[1,214]},o($V9,[2,57]),{61:[2,59]}],
defaultActions: {9:[2,1],30:[2,6],36:[2,3],40:[2,4],80:[2,7],86:[2,2],211:[2,58],214:[2,59]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        global.terminal.error(str); throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            global.terminal.error(str); throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* ignore comment */ 
break;
case 1: this.begin('comment'); 
break;
case 2: this.popState(); 
break;
case 3: /* ignore comment */ 
break;
case 4: /* ignore space */ 
break;
case 5: return 6; 
break;
case 6: return "T_REAL_LIT" 
break;
case 7: return "T_INT_LIT" 
break;
case 8: return "T_STRING_LIT"; 
break;
case 9: return "T_STRING_LIT"; 
break;
case 10: return "T_CARAC_LIT"; 
break;
case 11: return "T_BOOL_LIT"; 
break;
case 12: return "T_BOOL_LIT"; 
break;
case 13: return "ALGORITMO"; 
break;
case 14: return "VARIAVEIS"; 
break;
case 15: return "FIM_VARIAVEIS"; 
break;
case 16: return "FIM_ENQUANTO"; 
break;
case 17: return "FIM_PARA"; 
break;
case 18: return "FIM_SE"; 
break;
case 19: return "FIM"; 
break;
case 20: return "INTEIRO"; 
break;
case 21: return "REAL"; 
break;
case 22: return "CARACTERE"; 
break;
case 23: return "LITERAL"; 
break;
case 24: return "LOGICO"; 
break;
case 25: return "INICIO"; 
break;
case 26: return "SE"; 
break;
case 27: return "SENAO"; 
break;
case 28: return "ENQUANTO"; 
break;
case 29: return "ENTAO"; 
break;
case 30: return "FACA"; 
break;
case 31: return "PARA"; 
break;
case 32: return "DE"; 
break;
case 33: return "ATE"; 
break;
case 34: return "E"; 
break;
case 35: return "OU"; 
break;
case 36: return "XOU"; 
break;
case 37: return "NAO"; 
break;
case 38: return "MATRIZ"; 
break;
case 39: return "INTEIROS"; 
break;
case 40: return "REAIS"; 
break;
case 41: return "CARACTERES"; 
break;
case 42: return "LITERAIS"; 
break;
case 43: return "LOGICOS"; 
break;
case 44: return "FUNCAO"; 
break;
case 45: return "RETORNE"; 
break;
case 46: return "PASSO"; 
break;
case 47: return "T_IDENTIFICADOR"; 
break;
case 48: return ":="; 
break;
case 49: return ";"; 
break;
case 50: return ":"; 
break;
case 51: return ","; 
break;
case 52: return "["; 
break;
case 53: return "]"; 
break;
case 54: return "("; 
break;
case 55: return ")"; 
break;
case 56: return "+"; 
break;
case 57: return "-"; 
break;
case 58: return "*"; 
break;
case 59: return "/"; 
break;
case 60: return "%"; 
break;
case 61: return "||"; 
break;
case 62: return "&&"; 
break;
case 63: return "|"; 
break;
case 64: return "&"; 
break;
case 65: return "^"; 
break;
case 66: return "~"; 
break;
case 67: return "<>"; 
break;
case 68: return ">="; 
break;
case 69: return "<="; 
break;
case 70: return "<"; 
break;
case 71: return ">"; 
break;
case 72: return "="; 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:\s+)/,/^(?:$)/,/^(?:(([0-9]+)[\.]([0-9]+)))/,/^(?:(([0][cC][0-8]+)|([0][xX][0-9a-fA-F]+)|([0][bB][01]+)|([0-9]+)))/,/^(?:"")/,/^(?:"([^"]|(\\.))*")/,/^(?:'(.|(\\.))')/,/^(?:verdadeiro\b)/,/^(?:falso\b)/,/^(?:algoritmo\b)/,/^(?:variaveis\b)/,/^(?:fimvariaveis\b)/,/^(?:fimenquanto\b)/,/^(?:fimpara\b)/,/^(?:fimse\b)/,/^(?:fim\b)/,/^(?:inteiro\b)/,/^(?:real\b)/,/^(?:caractere\b)/,/^(?:literal\b)/,/^(?:logico\b)/,/^(?:inicio\b)/,/^(?:se\b)/,/^(?:senao\b)/,/^(?:enquanto\b)/,/^(?:entao\b)/,/^(?:faca\b)/,/^(?:para\b)/,/^(?:de\b)/,/^(?:ate\b)/,/^(?:e\b)/,/^(?:ou\b)/,/^(?:xou\b)/,/^(?:nao\b)/,/^(?:matriz\b)/,/^(?:inteiros\b)/,/^(?:reais\b)/,/^(?:caracteres\b)/,/^(?:literais\b)/,/^(?:logicos\b)/,/^(?:funcao\b)/,/^(?:retorne\b)/,/^(?:passo\b)/,/^(?:[a-zA-Z_][0-9a-zA-Z_]*)/,/^(?::=)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\|)/,/^(?:&)/,/^(?:\^)/,/^(?:~)/,/^(?:<>)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}