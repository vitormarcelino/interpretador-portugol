/**
 * Javascript Portugol
 * https://github.com/moacir/jspt
 *
 * Copyright (c) 2013 Moacir de Oliveira
 * Licensed under the MIT license.
 */

'use strict';

function Context(items) {
    this.items = items || {};
}

Context.prototype = {
    setVariable: function (id, type, value) {
        this.items[id] = new ContextItem(id, type, value);
    },
    setMatriz: function (id, index, value) {
        //TO-DO
    },
    declareMatriz: function(id, type, value, length) {
        var values = {};
        for (var i = 0; i < length; i++) {
            values[i] = new ContextItem(undefined, type, value);
        }
        this.items[id] = new ContextMatriz(id, type, values, length);
    },
    setFunction: function (id, fn) {
        this.items[id] = new ContextItem(id, 'Function', fn);
    },
    exists: function (id) {
        return this.items[id] !== undefined;
    },
    getItem: function (id) {
        return this.items[id];
    },
    getMatrizIndex: function (id, index) {
        return this.items[id].values[index];
    },
    getItemValue: function (id) {
        return (this.items[id] && this.items[id].value) || this.items[id];
    },
    copy: function () {
        var copied = {};

        for (var i in this.items) {
            if (this.items.hasOwnProperty(i)) {
                copied[i] = this.items[i];
            }
        }

        return new Context(copied);
    },
    attach: function (ctx) {
        if (!(ctx instanceof Context)) {
            throw new Error('O m칩dulo precisa extender um Contexto');
        }

        for (var i in ctx.items) {
            if (ctx.items.hasOwnProperty(i)) {
                if (this.items[i] !== undefined) {
                    throw new Error('A propriedade no m칩dulo j치 est치 definida: ' + i);
                }
                this.items[i] = ctx.items[i];
            }
        }
    }
};

function ContextItem(id, type, value) {
    this.id = id;
    this.type = type;
    this.value = (value !== undefined) ? value : null;
}

function ContextMatriz(id, type, value, length) {
    this.id = id;
    this.type = type;
    this.values = (value !== undefined) ? value : null;
    this.length = (length !== undefined) ? length : 0;
}

exports.context = Context;
